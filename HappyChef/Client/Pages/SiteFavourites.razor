@page "/sitefavourites"
@attribute [Authorize]
@inject HttpClient http
@using HappyChef.Client.Models
@inject IHttpClientFactory _clientFactory
@inject Sotsera.Blazor.Toaster.IToaster Toaster
@inherits FavouriteBase

<h3>Favourites</h3>

@if (sitefavourites == null)
{
    <text> Loading</text>
}
else if (sitefavourites.Length == 0)
{
    <text> The are currently no site favourites to display :(</text>
}
else
{

    switch (viewstate)
    {
        case ReceipeViewState.List:
            <DxDataGrid Data="@sitefavourites" ShowPager="true" AllowSort="true" ShowFilterRow="true">

                <DxDataGridColumn Field="@nameof(SiteFavouritesModel.Total)" Caption="Popularity" />
                <DxDataGridColumn Field="@nameof(SiteFavouritesModel.FavouriteLabel)" Caption="Recipe Name" />
                <DxDataGridColumn Field="@nameof(SiteFavouritesModel.FavouriteCalories)" Caption="Calories" />
                <DxDataGridColumn Field="@nameof(SiteFavouritesModel.FavouriteTotalTime)" Caption="Prep Time (min)" />
                <DxDataGridColumn Field="@nameof(SiteFavouritesModel.FavouriteTotalTime)" Caption="Actions">
                    <DisplayTemplate>
                        @{

                            var favourite = context as SiteFavouritesModel;
                        }
                        <button type="submit" class="btn btn-success" @onclick="@( () => ShowRecipe(favourite.RecipeUri))">View Recipe</button>
                    </DisplayTemplate>
                </DxDataGridColumn>
            </DxDataGrid>
            break;
        case ReceipeViewState.View:
            <button class="btn btn-sm btn-primary mb-3" @onclick="@BackToFavourites"> Back</button>
            <HappyChef.Client.Components.RecipeDetailsComponent Recipe="@viewrecipe">
            </HappyChef.Client.Components.RecipeDetailsComponent>
            break;
        default:
            break;
    }



}
@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    System.Security.Claims.ClaimsPrincipal user { get; set; }

    SiteFavouritesModel[] sitefavourites { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadSiteFavourites();
    }

    async Task LoadSiteFavourites()
    {
        sitefavourites = await http.GetFromJsonAsync<SiteFavouritesModel[]>("api/favourites/GetFavoriteSummary");
        this.StateHasChanged();

    }

    async Task ShowRecipe(string recipeUri)
    {
        viewrecipe = await LoadRecipe(recipeUri);
        viewstate = ReceipeViewState.View;
        this.StateHasChanged();
    }
    

}
